// Code generated by goyacc -p pri -o parse_pri.y.go parse_pri.y. DO NOT EDIT.

//line parse_pri.y:2
package semver

import __yyfmt__ "fmt"

//line parse_pri.y:2

import "fmt"

//line parse_pri.y:8
type priSymType struct {
	yys    int
	pri    PreReleaseID
	string []byte
	char   byte
}

const PRI_HYPHEN = 57346
const PRI_LETTER = 57347
const PRI_ZERO = 57348
const PRI_POSITIVE_DIGIT = 57349

var priToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"PRI_HYPHEN",
	"PRI_LETTER",
	"PRI_ZERO",
	"PRI_POSITIVE_DIGIT",
}
var priStatenames = [...]string{}

const priEofCode = 1
const priErrCode = 2
const priInitialStackSize = 16

//line parse_pri.y:74

type priLexerImpl struct {
	index        int
	len          int
	raw          []rune
	syntaxErrPos int
	syntaxErr    string
	result       PreReleaseID
}

func (s *priLexerImpl) Lex(lval *priSymType) int {
	if s.len <= s.index {
		return 0
	}
	n := s.raw[s.index]
	s.index++
	switch n {
	/* PRI_HYPHEN: '-' */
	case '-':
		lval.char = byte(n)
		return PRI_HYPHEN

	/* PRI_ZERO: '0' */
	case '0':
		lval.char = byte(n)
		return PRI_ZERO
	}

	/* PRI_POSITIVE_DIGIT: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' */
	if '1' <= n && n <= '9' {
		lval.char = byte(n)
		return PRI_POSITIVE_DIGIT
	}

	/* PRI_LETTER:
	  'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J'
	| 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T'
	| 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd'
	| 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'
	| 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x'
	| 'y' | 'z' */
	if 'A' <= n && n <= 'Z' || 'a' <= n && n <= 'z' {
		lval.char = byte(n)
		return PRI_LETTER
	}

	// TODO; check valid char
	// other
	return int(n)
}

func (s *priLexerImpl) Rune(r rune) int {
	return -1
}

func (s *priLexerImpl) Error(err string) {
	s.syntaxErrPos = s.index - 1
	s.syntaxErr = err
}

func MustParsePreReleaseID(s string) PreReleaseID {
	pri, err := ParsePreReleaseID(s)
	if err != nil {
		panic(err)
	}
	return pri
}

func ParsePreReleaseID(s string) (PreReleaseID, error) {
	lex := &priLexerImpl{raw: []rune(s), len: len(s)}
	priParse(lex)
	if lex.syntaxErr != "" {
		return lex.result, fmt.Errorf("%s at %d", lex.syntaxErr, lex.syntaxErrPos)
	}
	return lex.result, nil
}

//line yacctab:1
var priExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	1, 13,
	-2, 18,
	-1, 7,
	1, 14,
	-2, 19,
}

const priPrivate = 57344

const priLast = 25

var priAct = [...]int{

	5, 9, 8, 14, 15, 12, 9, 8, 6, 7,
	10, 20, 18, 19, 13, 4, 11, 21, 9, 8,
	16, 17, 3, 2, 1,
}
var priPact = [...]int{

	2, -1000, -1000, -1000, -3, 14, -1000, 6, -1000, -1000,
	-3, -1000, -1000, -1000, -1000, -1000, -3, -1000, -1000, 6,
	-1000, -1000,
}
var priPgo = [...]int{

	0, 24, 23, 0, 21, 23, 16, 14, 10,
}
var priR1 = [...]int{

	0, 1, 1, 2, 2, 2, 2, 3, 3, 8,
	8, 7, 7, 4, 4, 4, 5, 5, 6, 6,
}
var priR2 = [...]int{

	0, 1, 1, 1, 2, 2, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 1,
}
var priChk = [...]int{

	-1000, -1, -2, -4, -7, -3, 6, 7, 5, 4,
	-8, -6, -3, -7, 6, 7, -7, -4, 6, 7,
	-3, -3,
}
var priDef = [...]int{

	0, -2, 1, 2, 3, 0, -2, -2, 11, 12,
	7, 9, 4, 10, 18, 19, 5, 15, 13, 14,
	8, 6,
}
var priTok1 = [...]int{

	1,
}
var priTok2 = [...]int{

	2, 3, 4, 5, 6, 7,
}
var priTok3 = [...]int{
	0,
}

var priErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	priDebug        = 0
	priErrorVerbose = false
)

type priLexer interface {
	Lex(lval *priSymType) int
	Error(s string)
}

type priParser interface {
	Parse(priLexer) int
	Lookahead() int
}

type priParserImpl struct {
	lval  priSymType
	stack [priInitialStackSize]priSymType
	char  int
}

func (p *priParserImpl) Lookahead() int {
	return p.char
}

func priNewParser() priParser {
	return &priParserImpl{}
}

const priFlag = -1000

func priTokname(c int) string {
	if c >= 1 && c-1 < len(priToknames) {
		if priToknames[c-1] != "" {
			return priToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func priStatname(s int) string {
	if s >= 0 && s < len(priStatenames) {
		if priStatenames[s] != "" {
			return priStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func priErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !priErrorVerbose {
		return "syntax error"
	}

	for _, e := range priErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + priTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := priPact[state]
	for tok := TOKSTART; tok-1 < len(priToknames); tok++ {
		if n := base + tok; n >= 0 && n < priLast && priChk[priAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if priDef[state] == -2 {
		i := 0
		for priExca[i] != -1 || priExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; priExca[i] >= 0; i += 2 {
			tok := priExca[i]
			if tok < TOKSTART || priExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if priExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += priTokname(tok)
	}
	return res
}

func prilex1(lex priLexer, lval *priSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = priTok1[0]
		goto out
	}
	if char < len(priTok1) {
		token = priTok1[char]
		goto out
	}
	if char >= priPrivate {
		if char < priPrivate+len(priTok2) {
			token = priTok2[char-priPrivate]
			goto out
		}
	}
	for i := 0; i < len(priTok3); i += 2 {
		token = priTok3[i+0]
		if token == char {
			token = priTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = priTok2[1] /* unknown char */
	}
	if priDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", priTokname(token), uint(char))
	}
	return char, token
}

func priParse(prilex priLexer) int {
	return priNewParser().Parse(prilex)
}

func (prircvr *priParserImpl) Parse(prilex priLexer) int {
	var prin int
	var priVAL priSymType
	var priDollar []priSymType
	_ = priDollar // silence set and not used
	priS := prircvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	pristate := 0
	prircvr.char = -1
	pritoken := -1 // prircvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		pristate = -1
		prircvr.char = -1
		pritoken = -1
	}()
	prip := -1
	goto pristack

ret0:
	return 0

ret1:
	return 1

pristack:
	/* put a state and value onto the stack */
	if priDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", priTokname(pritoken), priStatname(pristate))
	}

	prip++
	if prip >= len(priS) {
		nyys := make([]priSymType, len(priS)*2)
		copy(nyys, priS)
		priS = nyys
	}
	priS[prip] = priVAL
	priS[prip].yys = pristate

prinewstate:
	prin = priPact[pristate]
	if prin <= priFlag {
		goto pridefault /* simple state */
	}
	if prircvr.char < 0 {
		prircvr.char, pritoken = prilex1(prilex, &prircvr.lval)
	}
	prin += pritoken
	if prin < 0 || prin >= priLast {
		goto pridefault
	}
	prin = priAct[prin]
	if priChk[prin] == pritoken { /* valid shift */
		prircvr.char = -1
		pritoken = -1
		priVAL = prircvr.lval
		pristate = prin
		if Errflag > 0 {
			Errflag--
		}
		goto pristack
	}

pridefault:
	/* default state action */
	prin = priDef[pristate]
	if prin == -2 {
		if prircvr.char < 0 {
			prircvr.char, pritoken = prilex1(prilex, &prircvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if priExca[xi+0] == -1 && priExca[xi+1] == pristate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			prin = priExca[xi+0]
			if prin < 0 || prin == pritoken {
				break
			}
		}
		prin = priExca[xi+1]
		if prin < 0 {
			goto ret0
		}
	}
	if prin == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			prilex.Error(priErrorMessage(pristate, pritoken))
			Nerrs++
			if priDebug >= 1 {
				__yyfmt__.Printf("%s", priStatname(pristate))
				__yyfmt__.Printf(" saw %s\n", priTokname(pritoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for prip >= 0 {
				prin = priPact[priS[prip].yys] + priErrCode
				if prin >= 0 && prin < priLast {
					pristate = priAct[prin] /* simulate a shift of "error" */
					if priChk[pristate] == priErrCode {
						goto pristack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if priDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", priS[prip].yys)
				}
				prip--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if priDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", priTokname(pritoken))
			}
			if pritoken == priEofCode {
				goto ret1
			}
			prircvr.char = -1
			pritoken = -1
			goto prinewstate /* try again in the same state */
		}
	}

	/* reduction by production prin */
	if priDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", prin, priStatname(pristate))
	}

	print := prin
	pript := prip
	_ = pript // guard against "declared and not used"

	prip -= priR2[prin]
	// prip is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if prip+1 >= len(priS) {
		nyys := make([]priSymType, len(priS)*2)
		copy(nyys, priS)
		priS = nyys
	}
	priVAL = priS[prip+1]

	/* consult goto table to find next state */
	prin = priR1[prin]
	prig := priPgo[prin]
	prij := prig + priS[prip].yys + 1

	if prij >= priLast {
		pristate = priAct[prig]
	} else {
		pristate = priAct[prij]
		if priChk[pristate] != -prin {
			pristate = priAct[prig]
		}
	}
	// dummy call; replaced with literal code
	switch print {

	case 1:
		priDollar = priS[pript-1 : pript+1]
//line parse_pri.y:24
		{
			prilex.(*priLexerImpl).result = PreReleaseID{str: string(priDollar[1].string), isNum: false}
		}
	case 2:
		priDollar = priS[pript-1 : pript+1]
//line parse_pri.y:28
		{
			prilex.(*priLexerImpl).result = PreReleaseID{str: string(priDollar[1].string), num: numbytes(priDollar[1].string), isNum: true}
		}
	case 3:
		priDollar = priS[pript-1 : pript+1]
//line parse_pri.y:34
		{
			priVAL.string = []byte{priDollar[1].char}
		}
	case 4:
		priDollar = priS[pript-2 : pript+1]
//line parse_pri.y:36
		{
			priVAL.string = append([]byte{priDollar[1].char}, priDollar[2].string...)
		}
	case 5:
		priDollar = priS[pript-2 : pript+1]
//line parse_pri.y:38
		{
			priVAL.string = append(priDollar[1].string, priDollar[2].char)
		}
	case 6:
		priDollar = priS[pript-3 : pript+1]
//line parse_pri.y:40
		{
			priVAL.string = append(append(priDollar[1].string, priDollar[2].char), priDollar[3].string...)
		}
	case 7:
		priDollar = priS[pript-1 : pript+1]
//line parse_pri.y:44
		{
			priVAL.string = []byte{priDollar[1].char}
		}
	case 8:
		priDollar = priS[pript-2 : pript+1]
//line parse_pri.y:46
		{
			priVAL.string = append([]byte{priDollar[1].char}, priDollar[2].string...)
		}
	case 13:
		priDollar = priS[pript-1 : pript+1]
//line parse_pri.y:58
		{
			priVAL.string = []byte{priDollar[1].char}
		}
	case 14:
		priDollar = priS[pript-1 : pript+1]
//line parse_pri.y:60
		{
			priVAL.string = []byte{priDollar[1].char}
		}
	case 15:
		priDollar = priS[pript-2 : pript+1]
//line parse_pri.y:62
		{
			priVAL.string = append([]byte{priDollar[1].char}, priDollar[2].string...)
		}
	case 16:
		priDollar = priS[pript-1 : pript+1]
//line parse_pri.y:66
		{
			priVAL.string = []byte{priDollar[1].char}
		}
	case 17:
		priDollar = priS[pript-2 : pript+1]
//line parse_pri.y:68
		{
			priVAL.string = append([]byte{priDollar[1].char}, priDollar[2].string...)
		}
	}
	goto pristack /* stack new state and value */
}
