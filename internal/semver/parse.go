// Code generated by goyacc -o internal/semver/parse.go internal/semver/parse.y. DO NOT EDIT.

//line internal/semver/parse.y:2
package semver

import __yyfmt__ "fmt"

//line internal/semver/parse.y:2

import "fmt"

type num struct {
	num int
	str string
}

//line internal/semver/parse.y:12
type yySymType struct {
	yys int
	ver Semver
	pre PreRelease
	pds []PreReleaseID
	pid PreReleaseID
	bld Build
	bds []BuildID
	bid BuildID
	str string
	num num
}

const HYPHEN = 57346
const LETTER = 57347
const ZERO = 57348
const POSITIVE_DIGIT = 57349

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"HYPHEN",
	"LETTER",
	"ZERO",
	"POSITIVE_DIGIT",
	"'.'",
	"'+'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line internal/semver/parse.y:157

type semverLexer struct {
	index        int
	len          int
	raw          []rune
	syntaxErrPos int
	syntaxErr    string
	result       Semver
}

func (s *semverLexer) Lex(lval *yySymType) int {
	if s.len <= s.index {
		return 0
	}
	n := s.raw[s.index]
	s.index++
	switch n {
	/* HYPHEN: '-' */
	case '-':
		return HYPHEN
	/* ZERO: '0' */
	case '0':
		lval.num = num{num: 0, str: "0"}
		return ZERO
	/* POSITIVE_DIGIT: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' */
	case '1', '2', '3', '4', '5', '6', '7', '8', '9':
		lval.num = num{num: int(n - '0'), str: string([]rune{n})}
		return POSITIVE_DIGIT
	/* LETTER:
	     'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J'
	   | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T'
	   | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd'
	   | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'
	   | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x'
	   | 'y' | 'z' */
	case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J':
		lval.str = string([]rune{n})
		return LETTER
	case 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T':
		lval.str = string([]rune{n})
		return LETTER
	case 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd':
		lval.str = string([]rune{n})
		return LETTER
	case 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n':
		lval.str = string([]rune{n})
		return LETTER
	case 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x':
		lval.str = string([]rune{n})
		return LETTER
	case 'y', 'z':
		lval.str = string([]rune{n})
		return LETTER
	default:
		return int(n)
	}
}

func (s *semverLexer) Rune(r rune) int {
	return -1
}

func (s *semverLexer) Error(err string) {
	s.syntaxErrPos = s.index - 1
	s.syntaxErr = err
}

func Parse(s string) (Semver, error) {
	lex := &semverLexer{raw: []rune(s), len: len(s)}
	yyParse(lex)
	if lex.syntaxErr != "" {
		return lex.result, fmt.Errorf("%s at %d", lex.syntaxErr, lex.syntaxErrPos)
	}
	return lex.result, nil
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 26,
	1, 28,
	8, 28,
	9, 28,
	-2, 33,
	-1, 27,
	4, 34,
	5, 34,
	-2, 29,
	-1, 37,
	4, 24,
	5, 24,
	-2, 31,
}

const yyPrivate = 57344

const yyLast = 64

var yyAct = [...]int{

	31, 24, 36, 33, 25, 38, 8, 32, 7, 8,
	20, 13, 44, 35, 29, 28, 9, 10, 15, 37,
	29, 28, 26, 27, 9, 10, 41, 42, 8, 40,
	7, 22, 41, 39, 14, 43, 23, 3, 8, 37,
	13, 4, 5, 12, 41, 37, 45, 47, 48, 17,
	46, 16, 6, 22, 18, 29, 28, 11, 2, 30,
	34, 21, 19, 1,
}
var yyPact = [...]int{

	35, -1000, 44, -1000, -1000, 18, 35, -1000, 18, -1000,
	-1000, 26, -1000, -1000, 35, 45, -1000, 16, 10, -4,
	-1000, 25, -1000, -1000, 10, 51, -1000, 18, -1000, -1000,
	10, -1000, -1000, -1000, 4, -1000, -1000, 18, 10, 16,
	-1000, -1000, 10, -1000, 10, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 63, 62, 10, 61, 7, 3, 60, 13, 59,
	4, 1, 58, 57, 18, 36, 0, 2,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 1, 12, 13, 14, 2, 3,
	3, 5, 6, 6, 4, 4, 7, 7, 8, 8,
	8, 8, 10, 10, 9, 9, 11, 11, 15, 15,
	15, 17, 17, 16, 16,
}
var yyR2 = [...]int{

	0, 5, 7, 7, 9, 1, 1, 1, 1, 1,
	3, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	2, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -12, -15, 6, 7, 8, -17, -16, 6,
	7, -13, -15, -17, 8, -14, -15, 4, 9, -2,
	-3, -4, -8, -15, -11, -10, 6, 7, 5, 4,
	-9, -16, -5, -6, -7, -8, -17, -16, 9, 8,
	-10, -11, -11, -10, 8, -5, -3, -10, -6,
}
var yyDef = [...]int{

	0, -2, 0, 5, 28, 29, 0, 30, 31, 33,
	34, 0, 6, 32, 0, 1, 7, 0, 0, 2,
	8, 9, 14, 15, 18, 0, -2, -2, 26, 27,
	22, 24, 3, 11, 12, 16, 17, -2, 0, 0,
	19, 25, 20, 23, 0, 4, 10, 21, 13,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 9, 3, 3, 8,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-5 : yypt+1]
//line internal/semver/parse.y:45
		{
			yylex.(*semverLexer).result = Semver{Major: uint64(yyDollar[1].num.num), Minor: uint64(yyDollar[3].num.num), Patch: uint64(yyDollar[5].num.num)}
		}
	case 2:
		yyDollar = yyS[yypt-7 : yypt+1]
//line internal/semver/parse.y:49
		{
			yylex.(*semverLexer).result = Semver{Major: uint64(yyDollar[1].num.num), Minor: uint64(yyDollar[3].num.num), Patch: uint64(yyDollar[5].num.num), PreRelease: yyDollar[7].pre}
		}
	case 3:
		yyDollar = yyS[yypt-7 : yypt+1]
//line internal/semver/parse.y:53
		{
			yylex.(*semverLexer).result = Semver{Major: uint64(yyDollar[1].num.num), Minor: uint64(yyDollar[3].num.num), Patch: uint64(yyDollar[5].num.num), Build: yyDollar[7].bld}
		}
	case 4:
		yyDollar = yyS[yypt-9 : yypt+1]
//line internal/semver/parse.y:57
		{
			yylex.(*semverLexer).result = Semver{Major: uint64(yyDollar[1].num.num), Minor: uint64(yyDollar[3].num.num), Patch: uint64(yyDollar[5].num.num), PreRelease: yyDollar[7].pre, Build: yyDollar[9].bld}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/semver/parse.y:70
		{
			yyVAL.pre = PreRelease(yyDollar[1].pds)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/semver/parse.y:76
		{
			yyVAL.pds = []PreReleaseID{yyDollar[1].pid}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/semver/parse.y:80
		{
			yyVAL.pds = append([]PreReleaseID{yyDollar[1].pid}, yyDollar[3].pds...)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/semver/parse.y:86
		{
			yyVAL.bld = Build(yyDollar[1].bds)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/semver/parse.y:91
		{
			yyVAL.bds = []BuildID{yyDollar[1].bid}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/semver/parse.y:95
		{
			yyVAL.bds = append([]BuildID{yyDollar[1].bid}, yyDollar[3].bds...)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/semver/parse.y:101
		{
			yyVAL.pid = PreReleaseID{str: yyDollar[1].str, isNum: false}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/semver/parse.y:105
		{
			yyVAL.pid = PreReleaseID{str: yyDollar[1].num.str, num: uint64(yyDollar[1].num.num), isNum: true}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/semver/parse.y:111
		{
			yyVAL.bid = BuildID(yyDollar[1].str)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/semver/parse.y:115
		{
			yyVAL.bid = BuildID(yyDollar[1].num.str)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/semver/parse.y:122
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/semver/parse.y:124
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/semver/parse.y:126
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str + yyDollar[3].str
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/semver/parse.y:131
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/semver/parse.y:135
		{
			yyVAL.str = yyDollar[1].num.str
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/semver/parse.y:146
		{
			yyVAL.num = num{num: yyDollar[1].num.num*10 + yyDollar[2].num.num, str: yyDollar[1].num.str + yyDollar[2].num.str}
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/semver/parse.y:151
		{
			yyVAL.num = num{num: yyDollar[1].num.num*10 + yyDollar[2].num.num, str: yyDollar[1].num.str + yyDollar[2].num.str}
		}
	}
	goto yystack /* stack new state and value */
}
