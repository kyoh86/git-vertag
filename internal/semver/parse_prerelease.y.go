// Code generated by goyacc -p prerelease -o parse_prerelease.y.go parse_prerelease.y. DO NOT EDIT.

//line parse_prerelease.y:2
package semver

import __yyfmt__ "fmt"

//line parse_prerelease.y:2

import "fmt"

//line parse_prerelease.y:8
type prereleaseSymType struct {
	yys     int
	pre     PreRelease
	pre_ids []PreReleaseID
	pre_id  PreReleaseID
	string  []byte
	char    byte
}

const PRE_HYPHEN = 57346
const PRE_LETTER = 57347
const PRE_ZERO = 57348
const PRE_POSITIVE_DIGIT = 57349

var prereleaseToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"PRE_HYPHEN",
	"PRE_LETTER",
	"PRE_ZERO",
	"PRE_POSITIVE_DIGIT",
	"'.'",
}
var prereleaseStatenames = [...]string{}

const prereleaseEofCode = 1
const prereleaseErrCode = 2
const prereleaseInitialStackSize = 16

//line parse_prerelease.y:94

type prereleaseLexerImpl struct {
	index        int
	len          int
	raw          []rune
	syntaxErrPos int
	syntaxErr    string
	result       PreRelease
}

func (s *prereleaseLexerImpl) Lex(lval *prereleaseSymType) int {
	if s.len <= s.index {
		return 0
	}
	n := s.raw[s.index]
	s.index++
	switch n {
	/* PRE_HYPHEN: '-' */
	case '-':
		lval.char = byte(n)
		return PRE_HYPHEN

	/* PRE_ZERO: '0' */
	case '0':
		lval.char = byte(n)
		return PRE_ZERO
	}

	/* PRE_POSITIVE_DIGIT: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' */
	if '1' <= n && n <= '9' {
		lval.char = byte(n)
		return PRE_POSITIVE_DIGIT
	}

	/* PRE_LETTER:
	  'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J'
	| 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T'
	| 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd'
	| 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'
	| 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x'
	| 'y' | 'z' */
	if 'A' <= n && n <= 'Z' || 'a' <= n && n <= 'z' {
		lval.char = byte(n)
		return PRE_LETTER
	}

	// TODO; check valid char
	// other
	return int(n)
}

func (s *prereleaseLexerImpl) Rune(r rune) int {
	return -1
}

func (s *prereleaseLexerImpl) Error(err string) {
	s.syntaxErrPos = s.index - 1
	s.syntaxErr = err
}

func MustParsePreRelease(s string) PreRelease {
	pre, err := ParsePreRelease(s)
	if err != nil {
		panic(err)
	}
	return pre
}

func ParsePreRelease(s string) (PreRelease, error) {
	lex := &prereleaseLexerImpl{raw: []rune(s), len: len(s)}
	prereleaseParse(lex)
	if lex.syntaxErr != "" {
		return lex.result, fmt.Errorf("prerelease %s at %d", lex.syntaxErr, lex.syntaxErrPos)
	}
	return lex.result, nil
}

//line yacctab:1
var prereleaseExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 8,
	1, 16,
	8, 16,
	-2, 21,
	-1, 9,
	4, 22,
	5, 22,
	-2, 17,
}

const prereleasePrivate = 57344

const prereleaseLast = 32

var prereleaseAct = [...]int{

	5, 7, 2, 16, 6, 21, 22, 12, 15, 14,
	20, 19, 11, 10, 23, 13, 4, 24, 6, 3,
	1, 25, 0, 20, 11, 10, 17, 18, 11, 10,
	8, 9,
}
var prereleasePact = [...]int{

	24, -1000, -1000, 1, -1000, -1000, 20, 8, -1000, -1,
	-1000, -1000, 20, -1000, 24, -1000, -1000, -1000, -1000, 20,
	-1000, -1000, -1, -1000, -1000, -1000,
}
var prereleasePgo = [...]int{

	0, 20, 2, 19, 16, 1, 0, 16, 15, 3,
	7,
}
var prereleaseR1 = [...]int{

	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	5, 5, 10, 10, 9, 9, 6, 6, 6, 7,
	7, 8, 8,
}
var prereleaseR2 = [...]int{

	0, 1, 1, 3, 1, 1, 1, 2, 2, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 1,
}
var prereleaseChk = [...]int{

	-1000, -1, -2, -3, -4, -6, -9, -5, 6, 7,
	5, 4, -10, -8, 8, -5, -9, 6, 7, -9,
	-6, 6, 7, -5, -2, -5,
}
var prereleaseDef = [...]int{

	0, -2, 1, 2, 4, 5, 6, 0, -2, -2,
	14, 15, 10, 12, 0, 7, 13, 21, 22, 8,
	18, 16, 17, 11, 3, 9,
}
var prereleaseTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 8,
}
var prereleaseTok2 = [...]int{

	2, 3, 4, 5, 6, 7,
}
var prereleaseTok3 = [...]int{
	0,
}

var prereleaseErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	prereleaseDebug        = 0
	prereleaseErrorVerbose = false
)

type prereleaseLexer interface {
	Lex(lval *prereleaseSymType) int
	Error(s string)
}

type prereleaseParser interface {
	Parse(prereleaseLexer) int
	Lookahead() int
}

type prereleaseParserImpl struct {
	lval  prereleaseSymType
	stack [prereleaseInitialStackSize]prereleaseSymType
	char  int
}

func (p *prereleaseParserImpl) Lookahead() int {
	return p.char
}

func prereleaseNewParser() prereleaseParser {
	return &prereleaseParserImpl{}
}

const prereleaseFlag = -1000

func prereleaseTokname(c int) string {
	if c >= 1 && c-1 < len(prereleaseToknames) {
		if prereleaseToknames[c-1] != "" {
			return prereleaseToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func prereleaseStatname(s int) string {
	if s >= 0 && s < len(prereleaseStatenames) {
		if prereleaseStatenames[s] != "" {
			return prereleaseStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func prereleaseErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !prereleaseErrorVerbose {
		return "syntax error"
	}

	for _, e := range prereleaseErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + prereleaseTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := prereleasePact[state]
	for tok := TOKSTART; tok-1 < len(prereleaseToknames); tok++ {
		if n := base + tok; n >= 0 && n < prereleaseLast && prereleaseChk[prereleaseAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if prereleaseDef[state] == -2 {
		i := 0
		for prereleaseExca[i] != -1 || prereleaseExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; prereleaseExca[i] >= 0; i += 2 {
			tok := prereleaseExca[i]
			if tok < TOKSTART || prereleaseExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if prereleaseExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += prereleaseTokname(tok)
	}
	return res
}

func prereleaselex1(lex prereleaseLexer, lval *prereleaseSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = prereleaseTok1[0]
		goto out
	}
	if char < len(prereleaseTok1) {
		token = prereleaseTok1[char]
		goto out
	}
	if char >= prereleasePrivate {
		if char < prereleasePrivate+len(prereleaseTok2) {
			token = prereleaseTok2[char-prereleasePrivate]
			goto out
		}
	}
	for i := 0; i < len(prereleaseTok3); i += 2 {
		token = prereleaseTok3[i+0]
		if token == char {
			token = prereleaseTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = prereleaseTok2[1] /* unknown char */
	}
	if prereleaseDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", prereleaseTokname(token), uint(char))
	}
	return char, token
}

func prereleaseParse(prereleaselex prereleaseLexer) int {
	return prereleaseNewParser().Parse(prereleaselex)
}

func (prereleasercvr *prereleaseParserImpl) Parse(prereleaselex prereleaseLexer) int {
	var prereleasen int
	var prereleaseVAL prereleaseSymType
	var prereleaseDollar []prereleaseSymType
	_ = prereleaseDollar // silence set and not used
	prereleaseS := prereleasercvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	prereleasestate := 0
	prereleasercvr.char = -1
	prereleasetoken := -1 // prereleasercvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		prereleasestate = -1
		prereleasercvr.char = -1
		prereleasetoken = -1
	}()
	prereleasep := -1
	goto prereleasestack

ret0:
	return 0

ret1:
	return 1

prereleasestack:
	/* put a state and value onto the stack */
	if prereleaseDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", prereleaseTokname(prereleasetoken), prereleaseStatname(prereleasestate))
	}

	prereleasep++
	if prereleasep >= len(prereleaseS) {
		nyys := make([]prereleaseSymType, len(prereleaseS)*2)
		copy(nyys, prereleaseS)
		prereleaseS = nyys
	}
	prereleaseS[prereleasep] = prereleaseVAL
	prereleaseS[prereleasep].yys = prereleasestate

prereleasenewstate:
	prereleasen = prereleasePact[prereleasestate]
	if prereleasen <= prereleaseFlag {
		goto prereleasedefault /* simple state */
	}
	if prereleasercvr.char < 0 {
		prereleasercvr.char, prereleasetoken = prereleaselex1(prereleaselex, &prereleasercvr.lval)
	}
	prereleasen += prereleasetoken
	if prereleasen < 0 || prereleasen >= prereleaseLast {
		goto prereleasedefault
	}
	prereleasen = prereleaseAct[prereleasen]
	if prereleaseChk[prereleasen] == prereleasetoken { /* valid shift */
		prereleasercvr.char = -1
		prereleasetoken = -1
		prereleaseVAL = prereleasercvr.lval
		prereleasestate = prereleasen
		if Errflag > 0 {
			Errflag--
		}
		goto prereleasestack
	}

prereleasedefault:
	/* default state action */
	prereleasen = prereleaseDef[prereleasestate]
	if prereleasen == -2 {
		if prereleasercvr.char < 0 {
			prereleasercvr.char, prereleasetoken = prereleaselex1(prereleaselex, &prereleasercvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if prereleaseExca[xi+0] == -1 && prereleaseExca[xi+1] == prereleasestate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			prereleasen = prereleaseExca[xi+0]
			if prereleasen < 0 || prereleasen == prereleasetoken {
				break
			}
		}
		prereleasen = prereleaseExca[xi+1]
		if prereleasen < 0 {
			goto ret0
		}
	}
	if prereleasen == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			prereleaselex.Error(prereleaseErrorMessage(prereleasestate, prereleasetoken))
			Nerrs++
			if prereleaseDebug >= 1 {
				__yyfmt__.Printf("%s", prereleaseStatname(prereleasestate))
				__yyfmt__.Printf(" saw %s\n", prereleaseTokname(prereleasetoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for prereleasep >= 0 {
				prereleasen = prereleasePact[prereleaseS[prereleasep].yys] + prereleaseErrCode
				if prereleasen >= 0 && prereleasen < prereleaseLast {
					prereleasestate = prereleaseAct[prereleasen] /* simulate a shift of "error" */
					if prereleaseChk[prereleasestate] == prereleaseErrCode {
						goto prereleasestack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if prereleaseDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", prereleaseS[prereleasep].yys)
				}
				prereleasep--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if prereleaseDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", prereleaseTokname(prereleasetoken))
			}
			if prereleasetoken == prereleaseEofCode {
				goto ret1
			}
			prereleasercvr.char = -1
			prereleasetoken = -1
			goto prereleasenewstate /* try again in the same state */
		}
	}

	/* reduction by production prereleasen */
	if prereleaseDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", prereleasen, prereleaseStatname(prereleasestate))
	}

	prereleasent := prereleasen
	prereleasept := prereleasep
	_ = prereleasept // guard against "declared and not used"

	prereleasep -= prereleaseR2[prereleasen]
	// prereleasep is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if prereleasep+1 >= len(prereleaseS) {
		nyys := make([]prereleaseSymType, len(prereleaseS)*2)
		copy(nyys, prereleaseS)
		prereleaseS = nyys
	}
	prereleaseVAL = prereleaseS[prereleasep+1]

	/* consult goto table to find next state */
	prereleasen = prereleaseR1[prereleasen]
	prereleaseg := prereleasePgo[prereleasen]
	prereleasej := prereleaseg + prereleaseS[prereleasep].yys + 1

	if prereleasej >= prereleaseLast {
		prereleasestate = prereleaseAct[prereleaseg]
	} else {
		prereleasestate = prereleaseAct[prereleasej]
		if prereleaseChk[prereleasestate] != -prereleasen {
			prereleasestate = prereleaseAct[prereleaseg]
		}
	}
	// dummy call; replaced with literal code
	switch prereleasent {

	case 1:
		prereleaseDollar = prereleaseS[prereleasept-1 : prereleasept+1]
//line parse_prerelease.y:28
		{
			prereleaselex.(*prereleaseLexerImpl).result = PreRelease(prereleaseDollar[1].pre_ids)
		}
	case 2:
		prereleaseDollar = prereleaseS[prereleasept-1 : prereleasept+1]
//line parse_prerelease.y:34
		{
			prereleaseVAL.pre_ids = []PreReleaseID{prereleaseDollar[1].pre_id}
		}
	case 3:
		prereleaseDollar = prereleaseS[prereleasept-3 : prereleasept+1]
//line parse_prerelease.y:38
		{
			prereleaseVAL.pre_ids = append([]PreReleaseID{prereleaseDollar[1].pre_id}, prereleaseDollar[3].pre_ids...)
		}
	case 4:
		prereleaseDollar = prereleaseS[prereleasept-1 : prereleasept+1]
//line parse_prerelease.y:44
		{
			prereleaseVAL.pre_id = PreReleaseID{str: string(prereleaseDollar[1].string), isNum: false}
		}
	case 5:
		prereleaseDollar = prereleaseS[prereleasept-1 : prereleasept+1]
//line parse_prerelease.y:48
		{
			prereleaseVAL.pre_id = PreReleaseID{str: string(prereleaseDollar[1].string), num: numbytes(prereleaseDollar[1].string), isNum: true}
		}
	case 6:
		prereleaseDollar = prereleaseS[prereleasept-1 : prereleasept+1]
//line parse_prerelease.y:54
		{
			prereleaseVAL.string = []byte{prereleaseDollar[1].char}
		}
	case 7:
		prereleaseDollar = prereleaseS[prereleasept-2 : prereleasept+1]
//line parse_prerelease.y:56
		{
			prereleaseVAL.string = append([]byte{prereleaseDollar[1].char}, prereleaseDollar[2].string...)
		}
	case 8:
		prereleaseDollar = prereleaseS[prereleasept-2 : prereleasept+1]
//line parse_prerelease.y:58
		{
			prereleaseVAL.string = append(prereleaseDollar[1].string, prereleaseDollar[2].char)
		}
	case 9:
		prereleaseDollar = prereleaseS[prereleasept-3 : prereleasept+1]
//line parse_prerelease.y:60
		{
			prereleaseVAL.string = append(append(prereleaseDollar[1].string, prereleaseDollar[2].char), prereleaseDollar[3].string...)
		}
	case 10:
		prereleaseDollar = prereleaseS[prereleasept-1 : prereleasept+1]
//line parse_prerelease.y:64
		{
			prereleaseVAL.string = []byte{prereleaseDollar[1].char}
		}
	case 11:
		prereleaseDollar = prereleaseS[prereleasept-2 : prereleasept+1]
//line parse_prerelease.y:66
		{
			prereleaseVAL.string = append([]byte{prereleaseDollar[1].char}, prereleaseDollar[2].string...)
		}
	case 16:
		prereleaseDollar = prereleaseS[prereleasept-1 : prereleasept+1]
//line parse_prerelease.y:78
		{
			prereleaseVAL.string = []byte{prereleaseDollar[1].char}
		}
	case 17:
		prereleaseDollar = prereleaseS[prereleasept-1 : prereleasept+1]
//line parse_prerelease.y:80
		{
			prereleaseVAL.string = []byte{prereleaseDollar[1].char}
		}
	case 18:
		prereleaseDollar = prereleaseS[prereleasept-2 : prereleasept+1]
//line parse_prerelease.y:82
		{
			prereleaseVAL.string = append([]byte{prereleaseDollar[1].char}, prereleaseDollar[2].string...)
		}
	case 19:
		prereleaseDollar = prereleaseS[prereleasept-1 : prereleasept+1]
//line parse_prerelease.y:86
		{
			prereleaseVAL.string = []byte{prereleaseDollar[1].char}
		}
	case 20:
		prereleaseDollar = prereleaseS[prereleasept-2 : prereleasept+1]
//line parse_prerelease.y:88
		{
			prereleaseVAL.string = append([]byte{prereleaseDollar[1].char}, prereleaseDollar[2].string...)
		}
	}
	goto prereleasestack /* stack new state and value */
}
